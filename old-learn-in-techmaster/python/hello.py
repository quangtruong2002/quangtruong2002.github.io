# print("What's your name?")

# name = input("> ")

# print(f"Hello {name}")
# print("xin ch√†o")

# my_name = "Ba"
# my _age = 28
# is_hadsome = True
# a_poem = """


# my_computer = "Dell"
# my_phone_number "p96 533 828x"

# c√°c ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n 
# s·ªë nguy√™n - in 
# s·ªë th·ª±c - float 
# logic - bool
# chu·ªói - str

# type_int = 1 
# type_float = 0.5
# type_bool = true # false

# ki·ªÉm tra ki·ªÉu d∆∞ li·ªáu 
# type(type_int)
# class <class 'int'>

# python l√† ng√¥n ng·ªØ c√≥ ki·ªÉu ƒë·ªông dynamic typing t∆∞∆°ng t·ª± 1 s·ªë ng√¥n ng·ªØ nh∆∞ JAVASCRIPT, bi·∫øn 

# Type Annotation 
# python 3 h·ªó tr·ª£ c√≠ ph√°p ghi ch√∫ ki·ªÉu d·ªØ li·ªáu cho bi·∫øn 
# v√† c√≤n ƒëc s·ª≠ d·ª•ng ƒë·ªÉ ghi ch√∫ ki·ªÉu DL c·ªßa c√°c tham s·ªë h√†m, ki·ªÉu DL tr·∫£ v·ªÅ t·ª´ h√†m 

# v·ªõi c√°c ki·ªÉu DL c∆° b·∫£n, gi√° tr·ªã trong bi·∫øn l√† ko th·ªÉ thay ƒë·ªïi, khi c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa bi·∫øn, th·ª±c ch·∫•t bi·∫øn s·∫Ω ƒëc g√°i cho  1 v√πng nh·ªè  kh√°c l∆∞u tr·ªØ gi√° tr·ªã m·ªõi

# id(obj) cho bi·∫øt ƒë·ªãa ch·ªâ v√πng nh·ªõ c·ªßa bi·∫øn 
# name = "Ba"
# print(id(name)) # 1888929324400

# name = "Tokuda"
# print(id(name)) # 140029576942504

# Mutable th√¨ ng∆∞·ª£c l·∫°i, b·∫•t k√¨ thay ƒë·ªïi n√†o ƒë·ªÅu ƒëc c·∫≠p nh·∫≠t ngay t·∫°i v√πng l√£nh th·ªï
# #VD
# list = [1, 2 ,3]
# print(id(list)) # 140029576941504

# list[1] = 0
# print(id(list)) #140029576941504

# s =  "Hello"
# s[0] 
# h[1]

# str = "Hello"
# print(len(str)) #5
# print(str[0]) 
# print(str[-1])
# print(str[0:2])
# print(str[-4:-1])
# print(str[:3])
# print(str[::2])
# print(str[:])

# Escape Strings 
# l√†m th·∫ø n√†o ƒë·ªÉ in ra chu·ªói: I'm Ba "x·∫•u trai" ?
# print("im ba x·∫•u trai")

# Formatted strings 
# python cho ph√©p nh√∫ng gi√° tr·ªã c·ªßa 1 bi·∫øn, ph∆∞∆°ng th·ª©c, ho·∫∑c 1 bi·ªÉu th·ª©c, ... v√†o 1 chu·ªói v·ªõi c√∫ ph√°p f-strings

# name = "ba"
# age = 28 
# greeting = f"ch√†o, t·ªõ l√† {name}, {age} tu·ªïi!"
# print(greenting)

# # c√°ch c·ªï ƒëi·ªÉn
# greenting = "ch√†o t·ªõ l√†" + {name}

# s = 'Hello'
# print(s.startswith('H'))
# print(s.find("i"))
# print(s.isalnum())
# print(s.isupper())

# Numbers 
# ki·ªÉu s·ªë, bao g·ªìm s·ªë nguy√™n int, s·ªë th·ª±c float v√† s·ªë ph·ª©c complex. python c≈©ng h·ªó tr·ª£ ƒë·ªãnh d·∫°ng s·ªë binary v√† hex v·ªõi di·ªÅn t·ªë prefix

# Operators (to√°n t·ª≠)
# th∆∞·ªùng ƒëc s·ª≠ d·ª•ng k·∫øt h·ª£p v·ªõi c√°c bi·∫øn ho·∫∑c gi√° tr·ªã t·∫°o ra bi·ªÉu th·ª©c v√† khi k·∫øt h·ª£p c√°c bi·ªÉu t·ª©c k·∫øt h·ª£p v·ªõi nhau  t·∫°o ra c√°c gi·∫£i thu·∫≠t 

# Basic P·∫ªators
# c√°c lo·∫°i to√°n t·ª≠
# x = 1+ 2
# x = 10 - 5 
# x =  2*3 To√°n t·ª≠ nh√¢n c√°c gi√° tr·ªã l·∫°i v·ªõi nhau
# x = 2 / 3 To√°n t·ª≠ chia c√°c gi√° tr·ªã cho nhau
# x =  2 // 3 To√°n t·ª≠ chia l√†m tr√≤n xu·ªëng.
# x = 2 % 3 To√°n t·ª≠ chia l·∫•y ph·∫ßn d∆∞ 
# x = 2**3 To√°n t·ª≠ m≈©

# c√≥ 5 lo·∫°i to√°n t·ª≠, ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o c≈©ng th·∫ø th√¥i 
# l∆∞u √Ω trong python kh√¥ng c√≥ to√°n t·ª≠ ++, -- gi·ªëng c√°c ng√¥n ng·ªØ kh√°c

# Working width Numbers
# kh√°c v·ªõi chu·ªói, Python ko cung c·∫•p s·∫µn nhi·ªÅu ph∆∞∆°ng th·ª©c ƒë·ªÉ l√†m vi·ªác v·ªõi ki·ªÉu s·ªë. Thay v√†o ƒë√≥ n√≥ cung c·∫•p 
# import math 
# print(math.ceil(1.242234))



# # Type Conversion 
# # Python khoong h·ªó tr·ª£ chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ ki·ªáu t·ª± ƒë·ªông khi th·ª±c  hi·ªán t√≠nh to√°n c√°c bi·ªÉu th·ª©c gi·ªëng 1 c·ªë ng√¥n ng·ªØ kh√°c nh∆∞ javaScript,
# #  ƒë·ªÉ chuy·ªÉn ƒë·ªïi d·ªØ ki·ªáu c·∫ßn s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c chuy·ªÉn ƒë·ªïi chuy·ªÉn ƒë·ªïi ki·ªÉu r√µ r√†ng
# false
# # True + 1 
# # i + "sfsdf"
# true
# x = 10 
# print("ten ban la gi?")
# name = int(input(">>> "))
# print(name)
# print(type(name))

# python cung c·∫•p ph∆∞∆°ng th·ª©c input() 


# 1. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p v√†o 2 s·ªë a, b. T√≠nh v√† in ra k·∫øt qu·∫£ c·ªßa c√°c ph√©p t√≠nh(+ - * / // % ...) gi·ªØa 2 s·ªë ƒë√≥
# a = int(input("nh·∫≠p s·ªë a "))
# b = int(input("nh·∫≠p s·ªë b "))
# print(f"{a} + {b} = {a + b}")
# print(f"{a} - {b} = {a - b}")
# print(f"{a} * {b} = {a * b}")
# print(f"{a} / {b} = {a / b}")
# print(f"{a} // {b} = {a // b}")
# print(f"{a} % {b} = {a % b}")

# # 2. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p v√†o b√°n k√≠nh h√¨nh tr√≤n(r), t√≠nh v√† in ra chu vi, di·ªán t√≠ch h√¨nh tr√≤n ƒë√≥
# a = int(print("nh·∫≠p s·ªë v√†o "))
# print(f"{a * 2 * 3.14}")

# # 3. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p v√†o chi·ªÅu d√†i(w), chi·ªÅu r·ªông(w) c·ªßa h√¨nh ch·ªØ nh·∫≠t, t√≠nh v√† in ra chu vi, di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t ƒë√≥
# a = int(input("nh·∫≠p s·ªë a "))
# b = int(input("nh·∫≠p s·ªë b "))
# print(f"({a} + {b}) * 2 = {(a + b) * 2}")

# # 4. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p v√†o gi√° tr·ªã ƒë·ªô d√†i(long) v·ªõi ƒë∆°n v·ªã l√† cm, quy ƒë·ªïi v√† in ra gi√° tr·ªã t∆∞∆°ng ·ª©ng ·ªü c√°c ƒë∆°n v·ªã km, dm, m, mm
# cm = int(input("nh·∫≠p ƒë·ªô d√†i >> "))
# print(f"{cm * 10}") # mm
# # cm 10
# print(f"{cm / 10}") # dm
# print(f"{cm / 100}") # m 
# print(f"{cm / 100000}") # km


# # # 5. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p v√†o gi√° tr·ªã nhi·ªát ƒë·ªô thang nhi·ªát Celsius(c), quy ƒë·ªïi v√† in ra nhi·ªát ƒë·ªô t∆∞∆°ng ·ª©ng trong thang nhi·ªát Fahrenheit v√† Kevin
# c = int(input("nh·∫≠p nhi·ªát ƒë·ªô v√†o ƒë√¢y >> "))

# print(f"{(c * 1.8) + 32}")
# print(f"{c + 273.5}")

# # 6. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p v√†o s·ªë ph√∫t(t√≠nh t·ª´ 0h c·ªßa ng√†y h√¥m nay, gi·∫£ s·ª≠ s·ªë ph√∫t nh·∫≠p kh√¥ng qu√° 1440), t√≠nh v√† in ra gi√° tr·ªã gi·ªù: ph√∫t t∆∞∆°ng ·ª©ng(VD: 325 -> 5: 25)
# import datetime
# print(datetime.timedelta(seconds= int(input(" h√£y nh·∫≠p m·ªôt s·ªë >> "))))

# # =====================================================================================================================================================================================

# 1. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p m·ªôt chu·ªói, v√† m·ªôt gi√° tr·ªã s·ªë (index), hi·ªÉn th·ªã chu·ªói ƒë∆∞·ª£c c·∫Øt t·ª´ 0 ƒë·∫øn v·ªã tr√≠ index
# string = input("h√£y nh·∫≠p m·ªôt chu·ªói: ")
# index = input("h√£y nh·∫≠p m·ªôt s·ªë: ")
# print(string[ 0 : int(index) ])



# 2. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p t√™n, in ra t√™n vi·∫øt t·∫Øt theo m·∫´u:
# VD
# Nh·∫≠p h·ªç t√™n: Ba Nguy·ªÖn
# Ba Ngu.
string = input("Nh·∫≠p h·ªç t√™n: ") 
a = string.find(" ")
print(string[0 : a+3])



# 3. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p ƒë·ªãa ch·ªâ email, ·∫©n ƒë·ªãa ch·ªâ email v√† in ra theo m·∫´u trong v√≠ d·ª•:

# V√≠ d·ª•:

# Nh·∫≠p email: banguyen@gmail.com
# ba...@gmail.com

# 4. Vi·∫øt ch∆∞∆°ng tr√¨nh y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p m·ªôt chu·ªói, v√† m·ªôt k√Ω t·ª± b·∫•t k·ª≥ trong chu·ªói ƒë√≥. ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa k√Ω t·ª± trong chu·ªói, v√† hi·ªÉn th·ªã chu·ªói khi thay th·∫ø k√Ω t·ª± ƒë√≥ th√†nh üòâ

# V√≠ d·ª•:

# Nh·∫≠p m·ªôt chu·ªói b·∫•t k·ª≥: Hello world
# Nh·∫≠p m·ªôt k√Ω t·ª± trong chu·ªói: o
# K√Ω t·ª± 'o' xu·∫•t hi·ªán 2 l·∫ßn trong chu·ªói 'Hello world'
# Hellüòâ wüòârld
 string = input("h√£y nh·∫≠p m·ªôt chu·ªói: ")
 letter = input("h√£y nh·∫≠p m·ªôt t·ª´ b·∫•t k√¨: ")

 Conditional Statements
 th·ª±c thi c√°c c√¢u l·ªánh d·ª±a theo ƒëi·ªÅu ki·ªán
 age = 28 
 if age >= 20:
    print("Adult")
 elif age >= 13
    print('Teenager')
 else ... 

 Code block, pass 
 if age > 20 # X errro
 else 
 # do some thing 
 if age > 20:
     pass  # V right
else:
        pass



Logical Operators
Not - ph·ªß ƒë·ªãnh k·∫øt qyar c·ªßa bi·ªÉu th·ª©c 
name = ""
if not name:
    print("name is empty")


or - k·∫øt h·ª£p ƒëi·ªÅu ki·ªán, bi·ªÉu th·ª©c ƒë√∫ng khi 1 trong c√°c ƒëi·ªÅu k·ªán ƒë√∫ng 

and - k·∫øt h·ª£p ƒëi·ªÅu ki·ªán, bi·ªÉu th·ª©c ƒë√∫ng khi t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë√∫ng 
age = 25 
handsome = True 
rich = True 
if 18 <= age and age <= 25 and handsome and rich:
    print("Perfect")
    python h√¥c tr·ª£ chu·ªói to√°n t·ª≠ so s√°nh, cho ph√©p vi·∫øt bi·ªÅu th·ª©c logict r√µ r√†ng h∆°n 
    if 18 <= age and age <= 25 handsome and rich:
        print("Perfect")


Ternary Operator

Ternary Operator (to√°n t·ª≠ 3 ng√¥i) l√† c·ªß ph√°p rut gon c·ªßa if else th∆∞·ªùng ƒëc s·ª≠ d·ª•ng ƒë·ªÉ g√°n (ho·∫∑c tr·∫£ v·ªÅ) 1 gi√° tr·ªã theo ƒëi·ªÅu ki·ªán 
age = 25
x = v1 if condition else v2  
if age >= 18:
    message = "Eligible"
else:
    message = "Not eligible"
    message = "Eligible" if age >= 18 else "Not eligible"

x = condition 
? v1 
: condition 
? v2 
: condition 

for loops 
l·∫∑p qua b·∫•y k·ª≥ ƒë·ªëi tuongwh n√†o c√≥ th·ªÉ l·∫∑p (iterable), th∆∞c hi·ªán c√°c h√†nh ƒë·ªông (kh·ªëi code) l·∫∑p l·∫°i v·ªõi m·ªói ph·∫ßn c·ªßa ƒë·ªëi t∆∞·ª£ng
for char in "Mr Ba":            for i in ['b', 'a']:             for n in range(5): -> obj iterable ( h√†m ƒë·∫∑c bi·ªát) range(n)0 -> n-1 (range truy·ªÅn v√†o 1 gi√° tr·ªã)
    print(char)                    print (i)                        print(n)                                       range(x,y) (range truy·ªÅn v√†o nhi·ªÅu tham s·ªë)
    M                              B                            0                                                  range(a,b,c): a +b, a+c
    r                              a                            1
    #                                                           2
    B                                                           3
    a                                                           4
    __iter__()
    __next__()
    magic methot

-- trong python ch·ªâ c√≥ duy nh·∫•t 1 v√≤ng l·∫∑p for in 

    VD javaScript
    x = {
        key = v;
        a :1 
        b: 2
        c: 3
    }
    for obj 
    for of arr
    for 

    Braket Notation c√≥ 2 c√°ch d√πng 
    obh[Pn]
    obj["1afaaf"]
    obj[key]

    range() t·∫°o tra 1 chu·ªói (sequense) c√°c s·ªë nguy√™n
    range() tr·∫£ v·ªÅ 1 range obj l√† 2 ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ l·∫∑p gi·ªëng nh∆∞ string, list,....
    range ko gi·ªëng nh∆∞ list, n√≥ chi·∫øm r·∫•t √≠t b·ªô nh·ªõ 
    range(stop)
    range(start, stop,[stept])

    in ra c√°c s·ªë l·∫ª trong kho·∫£ng 1 -> 10
    for n in range(1, 10, 2):
        print(n)



break, Continue

continue - d·ª´ng l·∫ßn l·∫∑p hi·ªán t·∫°i, chy·ªÉn t·ªõi l·∫ßn l·∫∑p ti·∫øp theo 
for n in range(10):
    if n %  2 == 0:
        continue
    else:
        print(n)


break - d·ª´ng v√≤ng l·∫∑p 
for n in ranfe(10):
    if n > 5:
        break 
    else:
        print(n)


For else
C√∫ ph√°p ƒë·∫∑c bi·ªát 
 
 V√≤ng l·∫∑p for c≈©ng h·ªó tr·ª£ m·ªánh ƒë·ªÅ else, n·∫øu th∆∞c jhieenj h·∫øt v√≤ng l·∫∑p m√† ko g·∫∑p c√¢u l·ªánh break,
  m·ªán ƒë·ªÅ ekse s·∫Ω ƒëc th·ª±c thi, ng∆∞·ª£c l·∫°i, n·∫øu gapwk c√¢u k·ªánh brea ng·∫Øt vingf l·∫∑p th√¨ else kh√¥ng s·∫Ω ko ƒëc th·ª±c thi

  while loop 
  do while ph·∫£i th·ª±c hi·ªán t·ªëi thi·ªÉu 1 l·∫ßn 
  while sai l√† ng·∫Øt v√≤ng l·∫∑p 
  t∆∞∆°ng t·ª± nh∆∞ for, tuy nhi·ªÅn v√≤ng l·∫∑p while ko x√°c ƒë·ªãnh trc s·ªë l·∫ßn l·∫∑p 
  guess = 0 
  answer = 5 
  while gess != answer:
      guess = int(input("Guess a number\n>"))

      gi·∫£ l·∫∑p do while 


Functions
H√†m (ph∆∞∆°ng th·ª©c) ƒëc s·ª≠ d·ª•ng ƒë·ªÉ ƒë√≥ng g√≥i c√°c kh·ªëi m√£, cho ph√©p t√°i s·ª≠ d·ª•ng m√£ ·ªü nhi·ªÅu n∆°i, gi·∫£m thi·ªÉu code, gi·∫£m l·ªói 

c√∫ ph√°p: 
def funcname()

c√∫ ph√°p g·ªçi h√†m:
funcname()

Tham s·ªë khai b√°o c√°c gi√° tr·ªã ƒëc s·ª≠ d·ª•ng b√™n trong h√†m, c√°c ...

vd
def greet():
    print

return
c√≥ 2 lo·∫°i h√†m
- th·ª±c thi 1 nhi·ªám v·ª• n√†o ƒë√≥ 
- t√≠nh to√°n v√† tr·∫£ v·ªÅ 1 gi√° tr·ªã 

m·∫∑c ƒë·ªãnh h√†m lu√¥n tr·∫£ v·ªÅ 1 gi√° tr·ªã(none), ƒë·ªÉ ch·ªâ ƒë·ªãnh 1 gi√° tr·ªã tr·∫£ v·ªÅ t·ª´ h√†m, s·ª≠ d·ª•ng c√¢u l·ªánh return

def sum(a, b)

return a  + b 

print sum((1,5)) #6

c√¢u l·ªánh return (ng·ª´ng) ng·∫Øt h√†m, c√°c c√¢u l·ªánh ph√≠a d∆∞·ªõi b·ªã b·ªè qua

Type Annotation, Doctring

khai b√°o h√†m n√™n s·ª≠ d·ª•ng type nannotation v√† Doctring ƒë·ªÉ ghi ch√∫ r√µ r√†ng ch·ª©c nƒÉng c·ªßa h√†m, c√°c tham s·ªë truy·ªÅn v√†o c√≥ ki·ªÅu d·ªØ li·ªáu g√¨, laoij d·ªØ li·ªáu tr·∫£ v·ªÅ

def sum(a: int, b: int) -> int:
    """
    return sum of two number 
    parameters:
    - a: integer
    - b: integer
    return: a + b -> integer
    """
    return a + b 



Scope

trong qython, c√≥ 2 ki·ªÉu c·ªßa bi·∫øn, t∆∞∆°ng ·ª©ng v·ªõi ph·∫°m vi(scope) t·ªìn t·∫°i c·ªßa bi·∫øn 
- bi·∫øn c·ª•c b·ªô - Functions scope
- bi·∫øn to√†n c·ª•c - file scope
bi·∫øn c·ª•c b·ªô ch·ªâ t·ªìn t·∫°i b√™n trong h√†m m√† n√≥ ƒëc khai b√°o 

python ko c√≥ block scope gi·ªëng nh∆∞ 1 s·ªë ng√¥n ng·ªØ kh√°c 
m·∫∑c ƒë·ªãnh vi·ªác thay ƒë·ªïi gi√° tr·ªã 1 bi·∫øn to√†n cuccj b√™n trong h√†m ko ·∫£nh h∆∞·ªüng ƒë·∫øn bi·∫øn to√†n c·ª•c 
(tr·ª´ khi khai b√°o bi·∫øn stoanf c·ª•c b√™n trong h√†m v·ªõi t·ª´ kh√≥a global - dont do this)
first name =" Ba "
last name= "nguyen"
def greet():
    first name = "b√©o"
    global last name
    last name = "√∫"

print( first name, last name) # B√©o √ö


Default parameter

c√≥ th·ªÉ g√°n 

Exception
khi l·∫≠p tr√¨nh, ch∆∞∆°ng tr√¨nh c√≥ th·ªÉ b·ªã fungwf kho g·∫∑p 1 l·ªói. 
c·∫ßn ph·∫£i x·ª≠ l√Ω c√°c l·ªói c√≥ th·ªÉ s·∫£y ra v√† ngƒÉn ch·∫∑n vi·ªác ch∆∞∆°ng tr√¨nh b·ªã crash khi ho·∫°t ƒë·ªông. S·ª≠ d·ª•ng kh·ªëi l·ªánh try:
try: 
    age = int(input("Age"))
except value l·ªói  as e # d√πng ƒë·ªÉ s·ª≠ l√≠ ƒëo·∫°n code l·ªói ƒë√≥ 

c√≥ r·∫•t nhi·ªÅu lo·∫°i l·ªói VD:
ValueError
ImportError
ZeroDivisionError...


c√¢u l·ªánh whith c√≥ th·ªÉ s·ª≠ d·ª•ng thay th·∫ø finally trong 1 s·ªë tr∆∞·ªùng h·ª£p khi l√†m vi·ªác v·ªõi c√°c t√†n nguy·ªÅn b√™n ngo√†i. v√≠ d·ª•n v·ªõi file
, n√≥ t·ª± ƒë·ªông g·ªçi h√†m f.close() thay v√¨ g·ªçi 

Data Strudtures

c·∫•u tr√∫c d·ªØ li·ªáu l√† c√°ch l∆∞u tr·ªØ, t·ªï ch·ª©c d·ªØ li·ªáu c√≥ th·ª© t·ª±, c√≥ h·ªá th·ªëng ƒë·ªÉ d·ªØ li·ªáu  c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt c√°ch hi·ªáu qu√° nh·∫•t 

c√≥ nhi·ªÅu lo·∫°i c·∫•u tr√∫c d·ªØ li·ªáu kh√°c nhau, m·ªói lo·∫°i cung c·∫•p m·ªôt c√°ch l∆∞u tr·ªØ v√† s·ª≠ l√≠ d·ªØ li·ªáu 

Lists 

l√† m·ªôt t·∫≠p h·ª£p c√°c ƒë√¥√∫ t∆∞·ª£ng c√°c m·ª•c trong l√≠t ƒëc ƒë√°nh ch·ªâ m·ª•c, v√† khoong nh·∫•t thi·∫øt ph·∫£i c√≥ c√πng m·ªôt ki·ªÉu d·ªØ li·ªáu


Accessing item 

M·ªói ph·∫ßn t·ª≠ trong l√≠t c√≥ th·ªÉ truy c·∫≠p ch·ªânh s·ª≠a gi√° tr·ªã s·ª≠ d·ª•ng c√∫ ph√°p 
numbers = list(range(10))
numbers[0]
numbers[0] = -1
numbers
numbers[0:3]
numbers[:]
numbers[::2]
numbers[::-1]


Looping over Lists 

List Methods


c√≥ th·ªÉ x√≥a c√°c ph·∫ßn t·ª≠ kh·ªèi l√≠t v·ªõi del 
l∆∞u √Ω x√≥a ph·∫ßn t·ª≠ kh·ªèi 

sorting Lists 
khi s·∫Øp x·∫øp m·ªôt l√≠t ch·ª© c√°c object ph·ª©c t·∫°p h∆°n, ch·ªâ ƒë·ªãnh m·ªôt h√†m cho tham s·ªë key c·ªßa h√†m sort, s·∫Øp x·∫øp 

Lambda Function 

Map Function 
h√†m fiter() ƒëc s·ª≠ d·ª•ng ƒë·ªÉ l·ªçc c√°c ph·∫ßn t·ª≠ 

h√†m map() ƒëc s·ª≠ d·ª•ng ƒë·ªÉ bi·∫øn 

List Method 


Sorting Lists
khi sƒÉp x·∫øp 1 list ch·ª©a c√°c pbject ph·ª©c t·∫°p 

lambda function l√† 1 h√†m ·∫©n danh ƒë∆°n gi·∫£n c√≥ th·ªÉ vi·∫ø tr√™n 1 d√≤ng.
 lambda fuction ddc d√πng ƒë·ªÉ truy·ªÅn tr·ª±c ti·∫øp v√†o h√†m kh√°c nh∆∞ 1 ƒë·ªëi s·ªë

 vd

 l = [
    ("iphone", 888),
    ("s21", 999),
    ("galaxy", 1000)
]

l.sort 
map ƒëc s·ª≠ d·ª•ng ƒë·ªÉ bi·∫øn ƒë·ªïi hay √°nh x·∫° 1 list th√†nh 1 list 

 m = [
    ("iphone", 888),
    ("s21", 999),
    ("galaxy", 1000)
]

m = map(lambda item: item[1], devices)
prices = list(map(lambda item: item[1], devices)) 


H√†m Filter ƒëc s·ª≠ d·ª•ng ƒë·ªÉ l·ªçc c√°c ph·∫ßn t·ª≠ 

list conprehensions l√† c√∫ ph√°p thay th·∫ø cho map v√† filter

[c for c in s] 
c = expention

for c in s:
    if int(c) % 2 == 0 
    return c

[int(c) if int(c) % 2 == 0 for c in s] 
[int(c) for c in s if int(c) % 2 == 0] 

H√†m zip ƒëc ·ª≠ d·ª•ng ƒë·ªÉ k·∫øt h·ª£p v·ªõi c√°c list m·ªõi, c√°c ph·∫ßn t·ª≠ tronng k√≠t m·ªõi l√† m√¥t tuple ch·ª©a c√°c ph·∫ßn t·ª≠ t·∫°i ch·ªâ m·ª•c t∆∞∆°ng ·ª©ng t·ª´ c√°c l√≠t 

VD:
l1 = [1, 2, 3, 4]
list(zip(l1,, "ab"))
k·∫øt qu·∫£ >> [(1, 'a'), (2, 'b')]

list unpacking 
python cho ph√©p g√°n gi√° tr·ªã trong list cho c√πng l√∫c nhi·ªÅu bi·∫øn 

tuple
v·ªÅ c∆° b·∫£n gi·ªëng h·ªát list, tuy nhi√™n, tuple ch·ªâ cho ph√©p ƒë·ªçc(read only), kh√¥ng th·∫ø th√™m m·ªõi m·ªôt ph·∫ßn t·ª≠ ho·∫∑c x√≥a , s·ª≠a m·ªôt ph·∫ßn t·ª≠ hi·ªán c√≥ 

tuple()  c√≥ ƒë·∫ßy ƒë·ªß c√°c t√≠nh ch·∫•t c·ªßa list, tuy nhi√™n ch·ªâ h√¥c tr·ª£ 2 ph∆∞∆°ng th·ª©c count() v√† index()

VD:
t = ()
type(t)
c√≥ th·ªÉ kh√¥ng d√πng ngo·∫∑c tr√≤n v√† thay v√†o ƒë√≥ l√† d·∫•u ","

python h·ªó tr·ª£ c√∫ ph√°p swap gi√° tr·ªã c·ªßa 2 ho·∫∑c nhi·ªÅu bi·∫øn v·ªõi c√∫ ph√°p r·∫•t ƒë∆°n gi·∫£n

SET()
- set l√† m·ªôt t·∫≠p h·ª£p c√°c ph·∫ßn t·ª≠ ko ƒëc ƒë√°nh ch·ªâ m·ª•c v√† gi√° tr·ªã c√°c ph·∫ßn t·ª≠ trong set l√† duy nh·∫•t(kh√¥ng c√≥ gi√° tr·ªã tr√πng nhau)

- set c≈©ng h·ªó tr·ª£ m·ªôt s·ªë to√°n t·ª≠ ƒë·∫∑c bi·ªát

s1 = [1, 2, 3] s2 = [1, 4]
print(s1 | s2) tr·∫£ v·ªÅ to√†n b·ªô ph·∫ßn t·ª´ ch·ª©a trong c·∫£ 2 m·∫£ng
print(s1 & s2) tr·∫£ v·ªÅ c√°c ph·∫ßn t·ª≠ c√≥ trong c·∫£ 2 m·∫£ng
print(s1  s2)
print(s1  s2)
print(s1  s2)

s = {1} 
ss = {1, 2}
s. difference_update(ss) 
- h√†m n√†y x√≥a t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ gi·ªëng nhau trong c·∫£ 2 m·∫£ng 

Dixtionaries 
l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu ƒë·∫∑c bi·ªát trong pythpn, n√≥ l√† m·ªôt t·∫≠p h·ª£p c√°c c·∫∑p key : value. m·ªói key √°nh x·∫° t·ªõi m·ªôt value t∆∞∆°ng ·ª©ng 
ch·ªâ cho ph√©p c√°c gi√° tr·ªã immutable l√†m key, c√≥ th·ªÉ l√† b·∫•t c·ª© ki·ªÉu d·ªØ li·ªáu n√†o 


c√≥ th·ªÉ s·ª≠ d·ª•ng ngo·∫∑c vu√¥ng d·∫•u nh√°y ho·∫∑c truy·ªÅn v√†o key word 

khi m·ªôt key kh√¥ng t·ªìn t·∫°i trong dict s·∫Ω gay l·ªói 
if "x" in point:
    print(point["x"])

t∆∞∆°ng t·ª± v·ªõi list comprehensions, ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng c√πng c√∫ ph√°p v·ªõi stet ho·∫∑c dictionary 
s = {x * 2 for  x in range(5) }
print(s)

generator Expressions kh·ªüi t·∫°o m·ªôt gi√° tr·ªã m·ªõi m·ªói v√≤ng l·∫∑p, n√≥ kh√¥ng l∆∞u tr·ªØ to√†n b·ªô gi√° tr·ªã trong b·ªô nh·ªõ, so v·ªõi list , genexpr chi·∫øm √≠t b·ªô nh·ªõ h∆°n r·∫•t nhi·ªÅu

unpacking operator ho·∫°t ƒë·ªông v·ªõi ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ l·∫∑p 
number  = [1 ,2 ,3] 
print(number)
print(*number)
value [*range(3), *"Ba"]
print(*value)
first = [1, 2]
second = ["a", "b"]
combine = [*first, *second, *"Hello"]

comprihensions ko s·ª≠ d·ª•ng ƒëc v·ªõi tuple 


