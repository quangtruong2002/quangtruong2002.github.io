// B√†i 1
// Vi·∫øt h√†m calc(op, a, b):

// Nh·∫≠n 3 tham s·ªë op l√† to√°n t·ª≠ + - * /, a, b l√† 2 s·ªë b·∫•t k·ª≥
// T√≠nh v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√©p t√≠nh t∆∞∆°ng ·ª©ng

function calc(op, a, b) {
    if (op === '+') console.log(a + b);
    else if (op === '-') console.log(a - b);
    else if (op === '/') console.log(a / b);
    else if (op === '*') console.log(a * b);
}
calc('/', 10, 2)

// B√†i 2
// Vi·∫øt h√†m isPrime(n):

// Nh·∫≠n 1 tham s·ªë n l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng
// Ki·ªÉm tra n c√≥ ph·∫£i s·ªë nguy√™n t·ªë hay kh√¥ng, tr·∫£ v·ªÅ k·∫øt qu·∫£ l√† true ho·∫∑c false

// 1. vi·∫øt h√†m isPrime(n)
// 2. n·∫øu n < 2 th√¨ return false  
// 3. l·∫∑p i t·ª´ 2 ƒë·∫øn n - 1
//     - n·∫øu n chia h·∫øt cho i th√¨ n kh√¥ng ph·∫£i s·ªë nguy√™n t·ªë return false
// 4. return true

function isPrime(n) {
    if(n < 2) return false;
    else {
        for (let i = 2; i < n - 1; i++) {
            if(n % i == 0) return false
        }
        return true
    }
}
console.log(isPrime(5));

// B√†i 3
// Vi·∫øt h√†m sum(a, b):

// Nh·∫≠n 2 tham s·ªë a, b l√† 2 s·ªë b·∫•t k·ª≥
// S·ª≠ d·ª•ng to√°n t·ª≠ logic ƒë·ªÉ g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh cho a v√† b l√† 0
// T√≠nh t·ªïng v√† tr·∫£ v·ªÅ k·∫øt qu·∫£

function sum (a, b) {
    a = a || 0;
    b = b || 0;

    return a + b;
}
console.log(sum(123, 1323));

// B√†i 4
// Vi·∫øt h√†m sumPrime(a, b):

// Nh·∫≠n 2 tham s·ªë a, b l√† 2 s·ªë nguy√™n b·∫•t k·ª≥ (v√† a < b)
// T√≠nh t·ªïng c√°c s·ªë nguy√™n t·ªë trong kho·∫£ng t·ª´ a ƒë·∫øn b v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
// üí° S·ª≠ d·ª•ng h√†m isPrime ·ªü b√†i 2

// 1. n·∫øu a > b return false;
// 2. khai b√°o bi·∫øn number l√† 0 ƒë·ªÉ c·ªông d·ªìn gi√° tr·ªã

// 3. l·∫∑p i t·ª´ a ƒë·∫øn b
//     3.1  Ki·ªÉm tra n·∫øu i l√† s·ªë nguy√™n t·ªë th√¨ c·ªông d·ªìn v√†o number
// 4. tr·∫£ v·ªÅ number

function sumPrime(a, b) {
    if (a > b) return false;
    else {
        let number = 0;
        for (let i = a; i <= b; i++) {
            if (isPrime(i)) number += i;
        }
        return number;
    }
}
console.log(sumPrime(10, 111));

// B√†i 5
// Vi·∫øt h√†m sumStrong(n):

// Nh·∫≠n tham s·ªë n l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng b·∫•t k·ª≥
// Ki·ªÉm tra trong d√£y s·ªë t·ª´ 1 ƒë·∫øn n c√≥ bao nhi√™u s·ªë l√† s·ªë Strong
// In k·∫øt qu·∫£ ra console (tr√™n m·ªôt h√†ng)
// üí° Vi·∫øt th√™m 2 h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong sumStrong

// factorial(n) ƒë·ªÉ t√≠nh giai th·ª´a
// isStrong(n) ƒë·ªÉ ki·ªÉm tra s·ªë Strong

// 1. vi·∫øt h√†m factorial ƒë·ªÉn t√≠nh giai th·ª´a
// 2. khai b√°o bi·∫øn sum = n ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£
// 3. l·∫∑p i t·ª´ 1 ƒë·∫øn n 
// 4. nh√¢n d·ªìn sum v·ªõi i
// 5. tr·∫£ v·ªÅ sum 

function factorial(n) {
    let sum = n;
    for (let i = 1; i < n; i++) sum *= i;
    return sum;
}

// 1.2 vi·∫øt h√†m isStrong(n) ƒë·ªÉ ki·ªÉm tra s·ªë strong
// 2.2 khai b√°o nCopy = n ƒë·ªÉ ch·ª©a gi√° tr·ªã g·ªëc c·ªßa n
// 3.2 khai b√°o total = 0 ƒë·ªÉ ch·ª©a k·∫øt qu·∫£ cu·ªëi c√πng ƒëc tr·∫£ v·ªÅ
// 4.2 l·∫∑p t·ª´ nCopy ƒë·∫øn 0
//     4.3 khai b√°o h√†m temp = nCopy % 10 ƒë·ªÉ l·∫•y gi√° tr·ªã cu·ªëi c√πng
//     4.4 nCopy =  (nCopy - temp) % 10  ƒë·ªÉ l·∫•y c√°c gi√° tr·ªã c√≤n l·∫°i cho ƒë·∫øn khi nCopy = 0
//     4.5 khai b√°o factorial1 = 1; ƒë·ªÉ ch·ª©a gi√° tr·ªã giai th·ª´a
//     4.6 l·∫∑p i t·ª´ 2 ƒë·∫øn nCopy
//     4.7 factorial1 *= i
//     4.8 total += factorial1
// 5.2 n·∫øu total == n th√¨ tr·∫£ v·ªÅ true (return true)
// 6.  kh√°c th√¨ tr·∫£ v·ªÅ false (return false)

function isStrong(n) {
    let nCopy = n;
    let total = 0;
    while (nCopy > 0) {
        let temp = nCopy % 10;
        nCopy = (nCopy - temp) / 10;
        total += factorial(temp);
    }
    if(total == n) return true;
    else return false;
}
console.log(isStrong(145))

// Nh·∫≠n tham s·ªë n l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng b·∫•t k·ª≥
// Ki·ªÉm tra trong d√£y s·ªë t·ª´ 1 ƒë·∫øn n c√≥ bao nhi√™u s·ªë l√† s·ªë Strong
// In k·∫øt qu·∫£ ra console (tr√™n m·ªôt h√†ng)
// üí° Vi·∫øt th√™m 2 h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong sumStrong

// 1.3 vi·∫øt h√†m sumStrong(n)
// 2.3 khai b√°o string ƒë·ªÉ ch·ª©a gi√° tr·ªã strong
// 3.3 l·∫∑p i t·ª´ 1 ƒë·∫øn n 
//     3.4 if(isStrong(i))  string += i
// 4.3 return string

function sumStrong(n) {
    let string = '';
    for (let i = 1 ; i <= n; i++) {
        if(isStrong(i)) string += i + " ";
    }
    return string
}
console.log(sumStrong(145))
// B√†i 6
// Vi·∫øt h√†m overload(n):

// Nh·∫≠n tham s·ªë n c√≥ gi√° tr·ªã b·∫•t k·ª≥
// Ki·ªÉm tra n·∫øu n l√† m·ªôt trong c√°c tr∆∞·ªùng h·ª£p d∆∞·ªõi ƒë√¢y:
// n kh√¥ng ph·∫£i l√† m·ªôt s·ªë
// n kh√¥ng ph·∫£i s·ªë nguy√™n d∆∞∆°ng > 2
// n l·ªõn h∆°n 30
// Th√¨ in ra console th√¥ng b√°o "Ch∆∞∆°ng tr√¨nh in d√£y Fibonacci,
// y√™u c·∫ßu tham s·ªë 'n' ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng > 2 v√† nh·ªè h∆°n 50" v√† d·ª´ng h√†m
// N·∫øu kh√¥ng ph·∫£i c√°c tr∆∞·ªùng h·ª£p ph√≠a tr√™n th√¨ in ra console d√£y n s·ªë Fibonacci

// 1. vi·∫øt h√†m fibonacci(n) ƒë·ªÉ in ra s·ªë 
// 2. khai b√°o bi·∫øn a = 1
// 3. khai b√°o bi·∫øn b = 1
// 4. khai b√°o string ƒë·ªÉ ch·ª©a gi√° tr·ªã
// 4. l·∫∑p i t·ª´ 1 ƒë·∫øn n - 2 
//     4.1 c = a + b;
//     4.1 a = b; 
//     4.3 b = c;
//     4.4 string += c;
// 5. tr·∫£ v·ªÅ string 

function fibonacci(n) {
    let a = 1;
    let b = 1;
    let string = a + " " + b + " ";
    let c;
    for (let i = 1; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;

        string += c + " ";
    } 
    return string;
}


// Ki·ªÉm tra n·∫øu n l√† m·ªôt trong c√°c tr∆∞·ªùng h·ª£p d∆∞·ªõi ƒë√¢y:
// n kh√¥ng ph·∫£i l√† m·ªôt s·ªë
// n kh√¥ng ph·∫£i s·ªë nguy√™n d∆∞∆°ng > 2
// n l·ªõn h∆°n 30
// Th√¨ in ra console th√¥ng b√°o "Ch∆∞∆°ng tr√¨nh in d√£y Fibonacci,
// y√™u c·∫ßu tham s·ªë 'n' ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng > 2 v√† nh·ªè h∆°n 50" v√† d·ª´ng h√†m
// N·∫øu kh√¥ng ph·∫£i c√°c tr∆∞·ªùng h·ª£p ph√≠a tr√™n th√¨ in ra console d√£y n s·ªë Fibonacci

function overLoad(n) {
    if (typeof n != 'number'|| !isFinite(n) || n < 2 || n > 30)  {
        console.log('ch∆∞∆°ng tr√¨nh in d√£y Fibonacci');
        return;
    }
    console.log(fibonacci(n))
}
overLoad(12);
overLoad(151);
overLoad(1);
overLoad(NaN);
overLoad(Infinity);
overLoad(31);
overLoad('12');



// B√†i 7
// Vi·∫øt h√†m randInt(a, b):

// Nh·∫≠n 2 tham s·ªë a, b b·∫•t k·ª≥
// Ki·ªÉm tra n·∫øu a v√† b l√† m·ªôt trong c√°c tr∆∞·ªùng h·ª£p d∆∞·ªõi ƒë√¢y:
// a ho·∫∑c b kh√¥ng ph·∫£i l√† m·ªôt s·ªë
// a ho·∫∑c b kh√¥ng ph·∫£i s·ªë nguy√™n
// Th√¨ in ra console th√¥ng b√°o "Ch∆∞∆°ng tr√¨nh t·∫°o s·ªë nguy√™n ng·∫´u nhi√™n trong kho·∫£ng t·ª´ a -> b, y√™u c·∫ßu a, b l√† 2 s·ªë nguy√™n"
// N·∫øu kh√¥ng ph·∫£i c√°c tr∆∞·ªùng h·ª£p tr√™n, t·∫°o m·ªôt s·ªë ng·∫´u nhi√™n trong kho·∫£ng t·ª´ a ƒë·∫øn b (bao g·ªìm c·∫£ b) v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ (l∆∞u √Ω a c√≥ th·ªÉ l·ªõn h∆°n b, trong tr∆∞·ªùng h·ª£p ƒë√≥ ph·∫£i ƒë·ªïi gi√° tr·ªã)

// 1. vi·∫øt h√†m randInt(a, b)
// 2. kh·ªüi t·∫°o max = a;
// 3. kh·ªüi t·∫°o min = b;
// 4. n·∫øu a < b th√¨ max = b min = a;
// 5. random min ƒë·∫øn max
// 6. in random ra console

function randInt(a, b) {
    let min = a;
    let max = b;
    if (a < b) {
        max = b;
        min = a;
    }
    if(typeof a != 'number' ||typeof b != 'number' || !isFinite(a) ||  !isFinite(b) || (a > 0 && a % 1 == 0)) {
        console.log("Ch∆∞∆°ng tr√¨nh t·∫°o s·ªë nguy√™n ng·∫´u nhi√™n trong kho·∫£ng t·ª´ a -> b, y√™u c·∫ßu a, b l√† 2 s·ªë nguy√™n");
        return;
    }
        let rand = Math.floor(Math.random() * (max - min + 1) + min);
        console.log(rand);
}
// randInt(1, 15);
// console.log(randInt(1.5, 4));
// console.log(randInt(1, "5"));
// console.log(randInt(1, -5));
// console.log(randInt(1, NaN));



// B√†i 8
// Vi·∫øt ch∆∞∆°ng tr√¨nh:

// Khai b√°o bi·∫øn square c√≥ gi√° tr·ªã l√† m·ªôt h√†m (bi·ªÉu th·ª©c h√†m), nh·∫≠n 1 tham s·ªë n l√† m·ªôt s·ªë b·∫•t k·ª≥. K·∫øt qu·∫£ tr·∫£ v·ªÅ b√¨nh ph∆∞∆°ng c·ªßa n
// Khai b√°o h√†m calc(func) nh·∫≠n tham s·ªë func c√≥ gi√° tr·ªã l√† 1 function
// H√†m calc cho ph√©p nh·∫≠n m·ªôt gi√° tr·ªã v√† l∆∞u v√†o bi·∫øn b·∫•t k·ª≥
// Sau khi nh·∫≠p gi√° tr·ªã, g·ªçi h√†m func ƒë·ªÉ t√≠nh v√† in ra k·∫øt qu·∫£
// G·ªçi h√†m calc v·ªõi ƒë·ªëi s·ªë l√† square
// üí° V√≠ d·ª•

// calc(square); // func = square => func() = square()


