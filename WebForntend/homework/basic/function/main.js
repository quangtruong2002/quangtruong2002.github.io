// B√†i 1
// Vi·∫øt h√†m calc(op, a, b):

// Nh·∫≠n 3 tham s·ªë op l√† to√°n t·ª≠ + - * /, a, b l√† 2 s·ªë b·∫•t k·ª≥
// T√≠nh v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√©p t√≠nh t∆∞∆°ng ·ª©ng



// B√†i 2
// Vi·∫øt h√†m isPrime(n):

// Nh·∫≠n 1 tham s·ªë n l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng
// Ki·ªÉm tra n c√≥ ph·∫£i s·ªë nguy√™n t·ªë hay kh√¥ng, tr·∫£ v·ªÅ k·∫øt qu·∫£ l√† true ho·∫∑c false
// B√†i 3
// Vi·∫øt h√†m sum(a, b):

// Nh·∫≠n 2 tham s·ªë a, b l√† 2 s·ªë b·∫•t k·ª≥
// S·ª≠ d·ª•ng to√°n t·ª≠ logic ƒë·ªÉ g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh cho a v√† b l√† 0
// T√≠nh t·ªïng v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
// B√†i 4
// Vi·∫øt h√†m sumPrime(a, b):

// Nh·∫≠n 2 tham s·ªë a, b l√† 2 s·ªë nguy√™n b·∫•t k·ª≥ (v√† a < b)
// T√≠nh t·ªïng c√°c s·ªë nguy√™n t·ªë trong kho·∫£ng t·ª´ a ƒë·∫øn b v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
// üí° S·ª≠ d·ª•ng h√†m isPrime ·ªü b√†i 2

// B√†i 5
// Vi·∫øt h√†m sumStrong(n):

// Nh·∫≠n tham s·ªë n l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng b·∫•t k·ª≥
// Ki·ªÉm tra trong d√£y s·ªë t·ª´ 1 ƒë·∫øn n c√≥ bao nhi√™u s·ªë l√† s·ªë Strong
// In k·∫øt qu·∫£ ra console (tr√™n m·ªôt h√†ng)
// üí° Vi·∫øt th√™m 2 h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong sumStrong

// factorial(n) ƒë·ªÉ t√≠nh giai th·ª´a
// isStrong(n) ƒë·ªÉ ki·ªÉm tra s·ªë Strong
// B√†i 6
// Vi·∫øt h√†m overload(n):

// Nh·∫≠n tham s·ªë n c√≥ gi√° tr·ªã b·∫•t k·ª≥
// Ki·ªÉm tra n·∫øu n l√† m·ªôt trong c√°c tr∆∞·ªùng h·ª£p d∆∞·ªõi ƒë√¢y:
// n kh√¥ng ph·∫£i l√† m·ªôt s·ªë
// n kh√¥ng ph·∫£i s·ªë nguy√™n d∆∞∆°ng > 2
// n l·ªõn h∆°n 30
// Th√¨ in ra console th√¥ng b√°o "Ch∆∞∆°ng tr√¨nh in d√£y Fibonacci, y√™u c·∫ßu tham s·ªë 'n' ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng > 2 v√† nh·ªè h∆°n 50" v√† d·ª´ng h√†m
// N·∫øu kh√¥ng ph·∫£i c√°c tr∆∞·ªùng h·ª£p ph√≠a tr√™n th√¨ in ra console d√£y n s·ªë Fibonacci
// B√†i 7
// Vi·∫øt h√†m randInt(a, b):

// Nh·∫≠n 2 tham s·ªë a, b b·∫•t k·ª≥
// Ki·ªÉm tra n·∫øu a v√† b l√† m·ªôt trong c√°c tr∆∞·ªùng h·ª£p d∆∞·ªõi ƒë√¢y:
// a ho·∫∑c b kh√¥ng ph·∫£i l√† m·ªôt s·ªë
// a ho·∫∑c b kh√¥ng ph·∫£i s·ªë nguy√™n
// Th√¨ in ra console th√¥ng b√°o "Ch∆∞∆°ng tr√¨nh t·∫°o s·ªë nguy√™n ng·∫´u nhi√™n trong kho·∫£ng t·ª´ a -> b, y√™u c·∫ßu a, b l√† 2 s·ªë nguy√™n"
// N·∫øu kh√¥ng ph·∫£i c√°c tr∆∞·ªùng h·ª£p tr√™n, t·∫°o m·ªôt s·ªë ng·∫´u nhi√™n trong kho·∫£ng t·ª´ a ƒë·∫øn b (bao g·ªìm c·∫£ b) v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ (l∆∞u √Ω a c√≥ th·ªÉ l·ªõn h∆°n b, trong tr∆∞·ªùng h·ª£p ƒë√≥ ph·∫£i ƒë·ªïi gi√° tr·ªã)
// B√†i 8
// Vi·∫øt ch∆∞∆°ng tr√¨nh:

// Khai b√°o bi·∫øn square c√≥ gi√° tr·ªã l√† m·ªôt h√†m (bi·ªÉu th·ª©c h√†m), nh·∫≠n 1 tham s·ªë n l√† m·ªôt s·ªë b·∫•t k·ª≥. K·∫øt qu·∫£ tr·∫£ v·ªÅ b√¨nh ph∆∞∆°ng c·ªßa n
// Khai b√°o h√†m calc(func) nh·∫≠n tham s·ªë func c√≥ gi√° tr·ªã l√† 1 function
// H√†m calc cho ph√©p nh·∫≠n m·ªôt gi√° tr·ªã v√† l∆∞u v√†o bi·∫øn b·∫•t k·ª≥
// Sau khi nh·∫≠p gi√° tr·ªã, g·ªçi h√†m func ƒë·ªÉ t√≠nh v√† in ra k·∫øt qu·∫£
// G·ªçi h√†m calc v·ªõi ƒë·ªëi s·ªë l√† square
// üí° V√≠ d·ª•

// calc(square); // func = square => func() = square()