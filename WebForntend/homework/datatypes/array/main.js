function randomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}


// B√†i 1
// Vi·∫øt h√†m randArr(n)

// Nh·∫≠n tham s·ªë n l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng (< 10)
// T·∫°o m·ªôt m·∫£ng g·ªìm n ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã ng·∫´u nhi√™n trong kho·∫£ng -10 ƒë·∫øn 10
// K·∫øt qu·∫£ tr·∫£ v·ªÅ m·∫£ng ƒë√≥
// G·ªçi h√†m randArr v√† ƒë·∫∑t gi√° tr·ªã cho bi·∫øn numbers

// PESUDO CODE 
// 1. vi·∫øt h√†m randArr(n) n l√† 1 s·ªë nguy√™n d∆∞∆°ng b√© h∆°n 10
// 2. khai b√°o v√† g√°n gi√° tr·ªã cho string r·ªóng;
// 3. l·∫∑p i t·ª´ 1 ƒë·∫øn n
//     khai b√°o rand v√† g√°n gi√° tr·ªã random t·ª´ -10 ƒë·∫øn 10
//     n·ªëi rand v√†o string 
// 4. tr·∫£ v·ªÅ string 
// 5. in h√†m randArr ra console


function randArr(n) {
  let string = '';
  for (i = 1; i <= n; i++) {
    let rand = randomNumber(-10, 10);
    string += rand + ' ';
  }
  return string;
}
console.log(randArr(randomNumber(1, 9)));

// B√†i 2
// Vi·∫øt h√†m sumArr(arr)

// Nh·∫≠n tham s·ªë arr l√† m·ªôt array
// T√≠nh trung b√¨nh c·ªông ph·∫ßn t·ª≠ c√≥ ki·ªÉu number trong arr v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
// G·ªçi h√†m sumArr v·ªõi array numbers, in k·∫øt qu·∫£ ra console

// 1. vi·∫øt h√†m sumArr(arr) 
// 2. khai b√°o v√† g√°n gi√° tr·ªã 0 cho num ƒë·ªÉ l∆∞u tr·ªØ gi√° tr·ªã c·ªông d·ªìn
// 3. khai b√°o bi·∫øn count = 1 ƒë·ªÉ l∆∞u tr·ªØ s·ªë gi√° tr·ªã ƒë√£ c·ªông d·ªìn
// 4. l·∫∑p i t·ª´ 1 ƒë·∫øn arr
//     4.2 c·ªông c·ªông d·ªïn arr v√†o num
//     4.3 count + 1
// 5. in num / count 
// 6. g·ªçi sumArr() v√† m·ªôt array v·ªõi gi√° tr·ªã b·∫•t k√¨ 

function sumArr(arr) {
  let num = 0;
  let count = 1;
  for (i = 1; i < arr.length; i++) {
    num += arr[i];
    count++;
  }
  console.log(`trung b√¨nh c·ªông c·ªßa ${num} / ${count} = ${num / count}`);
}
sumArr([14, 43, 41, 32]);

// B√†i 3
// Vi·∫øt h√†m findMax(arr)

// Nh·∫≠n tham s·ªë arr l√† m·ªôt array
// T√¨m v√† tr·∫£ v·ªÅ gi√° tr·ªã number l·ªõn nh·∫•t trong arr
// G·ªçi h√†m findMax v·ªõi array numbers, in k·∫øt qu·∫£ ra console

function findMax(arr) {
  let max = 0;
  for (i = 1; i < arr.length; i++) {
    if (arr[i] > max) max = arr[i];
  }
  console.log(`s·ªë l·ªõn nh·∫•t trong m·∫£ng l√† ${max}`);
}
findMax([15, 52, 21, 45]);

// B√†i 4
// Vi·∫øt h√†m add(arr, value)

// Nh·∫≠n tham s·ªë arr l√† m·ªôt array v√† value l√† m·ªôt gi√° tr·ªã b·∫•t k·ª≥
// Ki·ªÉm tra value c√≥ trong arr hay kh√¥ng
// N·∫øu kh√¥ng c√≥ th√¨ th√™m gi√° tr·ªã v√†o cu·ªëi arr v√† return index c·ªßa value sau khi th√™m
// N·∫øu c√≥ r·ªìi th√¨ b·ªè qua, return false
// G·ªçi h√†m add v·ªõi array numbers v√† th√™m m·ªôt s·ªë gi√° tr·ªã t√πy √Ω
// In array numbers ra console

function add(arr, value) {
  for (i = 0; i < arr.length; i++) {
    if (arr[i] !== value) {
      arr.push(value);
    }
    else if (arr[i] == value) {
      return false;
    }
  }
  console.log(arr);
}
add([12, 344, 23], 22);

// B√†i 5
// Vi·∫øt h√†m remove(arr, value)

// Nh·∫≠n tham s·ªë arr l√† m·ªôt array v√† value l√† m·ªôt gi√° tr·ªã b·∫•t k·ª≥
// Ki·ªÉm tra value c√≥ trong arr hay kh√¥ng
// N·∫øu kh√¥ng c√≥ th√¨ X√ìA TO√ÄN B·ªò gi√° tr·ªã value trong arr v√† return true
// N·∫øu kh√¥ng c√≥ th√¨ b·ªè qua, return false
// G·ªçi h√†m remove v·ªõi array numbers v√† x√≥a m·ªôt s·ªë gi√° tr·ªã t√πy √Ω
// In array numbers ra console

// 1. vi·∫øt h√†m remove(arr, value);
// 3. l·∫∑p i t·ª´ 1 ƒë·∫øn arr.length;
//    3.1 count+1
//    3.2 n·∫øu arr[i] == value flag = true
// 5. else return false

function remove(arr, value) {
  let flag = true
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] == value) {
      console.log(arr.shift(value));
    }
  }
  return false;
}
console.log(remove([1, 3, 4, 1], 1));





// B√†i 6
// Vi·∫øt h√†m reverse(arr)

// Nh·∫≠n tham s·ªë arr l√† m·ªôt array v√† value l√† m·ªôt gi√° tr·ªã b·∫•t k·ª≥
// Sao ch√©p arr ra m·ªôt array m·ªõi, v√† ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± c√°c ph·∫ßn t·ª≠
// K·∫øt qu·∫£ tr·∫£ v·ªÅ array m·ªõi
// G·ªçi h√†m reverse v·ªõi array numbers v√† in k·∫øt qu·∫£ ra console

// 1. vi·∫øt h√†m raverse(arr) v·ªõi arr l√† m·ªôt array v√† value l√† m·ªôt gi√° tr·ªã b·∫•t k·ª≥
// 2. khai b√°o m·ªôt m·∫£ng r·ªóng newArr b·∫±ng v·ªõi arr
// 3. s·ª≠ d·ª•ng reverse ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c m·∫£ng
// 4. tr·∫£ v·ªÅ newArr
// 5. g·ªçi v√† in h√†m ra console

function raverse(arr) {

  let newArr = arr;
  newArr.reverse(" ");
  return newArr;
}
console.log(raverse([1, 2, 3, 4]));



// B√†i 7
// Vi·∫øt h√†m filter(arr)

// Nh·∫≠n tham s·ªë arr l√† m·ªôt array
// L·ªçc ra c√°c ph·∫ßn t·ª≠ ki·ªÉu number c√≥ gi√° tr·ªã > 0 trong arr v√† l∆∞u v√†o m·ªôt array m·ªõi
// Tr·∫£ v·ªÅ k·∫øt qu·∫£ l√† array m·ªõi
// G·ªçi h√†m filter v·ªõi array numbers v√† in k·∫øt qu·∫£ ra console

// 1. vi·∫øt h√†m filter(arr)
// 2. khai b√°o m·ªôt m·∫£ng r·ªóng
// 3. l·∫∑p i t·ª´ 1 ƒë·∫øn arr.length
// 4. n·∫øu typeof arr == number v√† arr > 0
//     4.2 g√°n arr v√†o newArr
// 5. tr·∫£ v·ªÅ h√†m arr
// 6. g·ªçi h√†m filter

function filter(arr) {

  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    if (typeof arr[i] == 'number' && arr[i] > 0) {
      newArr.push(arr[i]);
    }
  }
  return newArr;
}
console.log(filter([1, 2, 3, '1', 0, -1, NaN]));


// B√†i 8
// Vi·∫øt h√†m map(arr)

// Nh·∫≠n tham s·ªë arr l√† m·ªôt array
// Chuy·ªÉn ƒë·ªïi c√°c ph·∫ßn t·ª≠ c√≥ ki·ªÉu number th√†nh b√¨nh ph∆∞∆°ng c·ªßa ch√≠nh n√≥ v√† l∆∞u v√†o m·ªôt array m·ªõi
// K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† array m·ªõi
// G·ªçi h√†m map v·ªõi array numbers v√† in k·∫øt qu·∫£ ra console

// 1. vi·∫øt h√†m map(arr)
// 2. khai b√°o m·∫£ng r·ªóng

// 3. l·∫∑p i t·ª´ 1 ƒë·∫øn arr.length
//  3.1. ƒë·∫©y gi√° tr·ªã arr[i] ** 2 v√†o m·∫£ng r·ªóng;
// 5. tr·∫£ v·ªÅ newArr
// 6. g·ªçi h√†m map v√† in ra console

function map(arr) {
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    newArr.push(arr[i] ** 2);
  }
  return newArr;
}
console.log(map([2, 5, 10, 20]));

// B√†i 9
// Vi·∫øt h√†m some(arr)

// Ki·ªÉm tra arr l√† m·ªôt array
// Ki·ªÉm tra xem trong arr c√≥ ph·∫ßn t·ª≠ n√†o ki·ªÉu number v√† chia h·∫øt cho c·∫£ 3 v√† 5 hay kh√¥ng
// K·∫øt qu·∫£ tr·∫£ v·ªÅ true n·∫øu c√≥ √≠t nh·∫•t 1 ph·∫ßn t·ª≠ chia h·∫øt, false n·∫øu to√†n b·ªô kh√¥ng chia h·∫øt
// G·ªçi h√†m some v·ªõi array numbers v√† in k·∫øt qu·∫£ ra console

// 1. vi·∫øt h√†m some(arr)
// 2. n·∫øu typeof arr kh√°c Array  th√¨ false v√† return d·ª´ng h√†m
// 3. n·∫øu arr chia h·∫øt cho c·∫£ 3 v√† 5 ho·∫∑c chia h·∫øt chia h·∫øt cho 1 ph·∫ßn t·ª≠ ;
//     3.1 tr·∫£ v·ªÅ true
// g·ªçi h√†m some ra console

function some(arr) {

  if (isFinite(arr)) return;
  else {

    for (let i = 0; i < arr.length; i++) {
      if (arr[i] % 3 == 0 && arr[i] % 5 == 0 || arr[i] % 3 == 0 || arr[i] % 5 == 0) return true;
    }
    return false;
  }
}
console.log(some([1, 5, 42]));
// B√†i 10
// S·∫Øp x·∫øp array numbers theo gi√° tr·ªã tƒÉng d·∫ßn

// üí° Tham kh·∫£o v√† s·ª≠ d·ª•ng method sort üí° sort nh·∫≠n m·ªôt h√†m l√†m tham s·ªë ƒë·ªÉ so s√°nh gi√° tr·ªã

let arr = [7, 2, 6, 5, 1, 3];
console.log(arr.sort());
console.log(arr.sort().reverse());

